type Address {
  city: String
  countryregion: String
  id: Int!
  postalcode: String
  stateprovince: String
  street: String
}

type Customer {
  email: String!
  id: Int!
  name: String!
  orders: [Order]
    @materializer(
      query: "getOrderListByCustomerId"
      arguments: [{ name: "customerId", field: "id" }]
    )
}

type Customeraddress {
  addressid: Int!
  customerid: Int!
}

type Lineitem {
  orderid: Int!
  productid: Int!
  quantity: Int
}

type Order {
  carrier: String
  createdat: Date!
  customerid: Int!
  id: Int!
  shippingcost: Float
  trackingid: String
}

type Product {
  description: String
  id: Int!
  image: String
  title: String
}

type Query {
  getAddressList: [Address]
    @dbquery(
      type: "postgresql"
      table: "address"
      configuration: "postgresql_config"
    )
  """
  This query is an example of how to simply paginate your responses.
  """
  getPaginatedAddressList(first: Int!, after: Int!): [Address]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "address" limit $1 offset $2
      """
      configuration: "postgresql_config"
    )
  """
  In this example, a single query parameter is passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getAddressById(id: Int!): [Address]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "address" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  """
  In this example, two query parameters are passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getAddressByIdAndCity(id: Int!, city: String!): [Address]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "address" where "id" = $1 and "city" = $2
      """
      configuration: "postgresql_config"
    )
  getCustomerList: [Customer]
    @dbquery(
      type: "postgresql"
      table: "customer"
      configuration: "postgresql_config"
    )
  getPaginatedCustomerList(first: Int!, after: Int!): [Customer]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "customer" limit $1 offset $2
      """
      configuration: "postgresql_config"
    )
  getCustomerById(id: Int!): Customer
    @dbquery(
      type: "postgresql"
      query: """
      select * from "customer" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  getCustomerByEmailAndName(email: String!, name: String!): [Customer]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "customer" where "email" = $1 and "name" = $2
      """
      configuration: "postgresql_config"
    )
  getCustomeraddressList: [Customeraddress]
    @dbquery(
      type: "postgresql"
      table: "customeraddress"
      configuration: "postgresql_config"
    )
  getLineitemList: [Lineitem]
    @dbquery(
      type: "postgresql"
      table: "lineitem"
      configuration: "postgresql_config"
    )
  getOrderList: [Order]
    @dbquery(
      type: "postgresql"
      table: "order"
      configuration: "postgresql_config"
    )
  getOrderListByCustomerId(customerId: Int!): [Order]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "order" where "customerid" = $1
      """
      configuration: "postgresql_config"
    )
  getProductList: [Product]
    @dbquery(
      type: "postgresql"
      table: "product"
      configuration: "postgresql_config"
    )
}

type Mutation {
  """
  In this mutation example you can see how to do a mutation to insert data in the database.
  """
  insertAddress(
    city: String!
    street: String!
    postalcode: String!
    stateprovince: String!
    countryregion: String!
    id: Int!
  ): Address
    @dbquery(
      type: "postgresql"
      table: "address"
      dml: INSERT
      configuration: "postgresql_config"
    )
  """
  In this mutation example you can see how to do a mutation to delete data from the database.
  """
  deleteAddress(
    city: String!
    street: String!
    postalcode: String!
    stateprovince: String!
    countryregion: String!
    id: Int!
  ): Address
    @dbquery(
      type: "postgresql"
      table: "address"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertCustomer(
    creditCard: String = ""
    label: String = ""
    street: String = ""
    city: String = ""
    postalCode: String = ""
    countryRegion: String = ""
    stateProvince: String = ""
    email: String!
    name: String!
  ): Customer
    @dbquery(
      type: "postgresql"
      table: "address"
      dml: INSERT
      configuration: "postgresql_config"
    )
}
